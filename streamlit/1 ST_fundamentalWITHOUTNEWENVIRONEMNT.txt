
WITHOUT NEW ENVIRONMENT

First Terminal:

(base) xxxxxs-MacBook-Pro:~ xxxxxxxxxxx$ cd /Users/xxxxxxxxxxx/Desktop/DataScience/streamlit
(base) xxxxxs-MacBook-Pro:streamlit xxxxxxxxxxx$ touch app.py
(base) xxxxxs-MacBook-Pro:streamlit xxxxxxxxxxxxx$ streamlit run app.py

  You can now view your Streamlit app in your browser.

  Local URL: http://localhost:856x
  Network URL: http://192.168.xxxxxx


THEN change to APP.PY file
always start:

import streamlit as st

Effortless caching @st.cache_data

- for title: st.title()
- for header: st.header()
- for subheader : st.subheader()
- for text: st.text()
- text writing with st.write()
- for markdown : st.markdown()
- Error/colorful text:
    st.success("Succesful")
    st.info("this is information")
    st.warning("this is just a warning")
    st.error("Error! Check your entry!")
    st.exception("Name Error ('name three not defined')")

- st.help() info about any python function. FE st.help(range)

- images:
st.image("image.jpeg")
st.image("image.jpeg", width = 600, caption = "A worker")

- Videos
vid_file = open("vid_in_same_directory.mp4", "rb").read()
# vid_bytes = vid_file.read()
st.video(vid_file)

# youtube video
st.video("https://www.youtube.com/watch?v=uHKfrz65KSU")

- Audio
# audio_file = # open("audio_in_same_directory.mp3", "rb").read()
# st.audio(audio_file)

# Widget
# st.checkbox()
if st.checkbox("Show/Hide"):
    st.text("If you click, this will be displayed")
    
# radio buttons: st.radio()
status = st.radio("What is your status", ("Active", "Inactive"))

if status == "Active":
    st.success("You are Active")
else:
    st.warning("You are inactive, activate!")
    
# st.selectbox()
edu = st.selectbox("What is your education level:", ["Bachelor", "Master", "Ph.D."])
st.write("Your education level is", edu)

# multiselection
#st.multiselect()
cities = st.multiselect("this is st.multiselect(): Which cities you have been in:", ("Barcelona", "Istanbul", "Paris", "London", "Amsterdam"))
st.write("You have visited", len(cities), "cities")

# st.slider()

st.slider("What is your level", 1,10) # text and range

# Slider
option1 = st.slider("Select a number", min_value=5, max_value=70, value=30, step=5)
option2 = st.slider("Select a number", min_value=0.2, max_value=30.2, value=5.2, step=0.2)

result=option1*option2
st.write("multiplication of two options is:",result)

# st.button()

st.button("any button here")

# activate a button
if st.button("Source"):
    st.text("Axel Springer, The Last Century, Berlin: 2012")
    
# st.text_input()
name = st.text_input("Your first name", ("Type here.."))

if st.button("Submit"):
    result = "Great job", name.title()
    st.success(result)
    
# st.text_area

message = st.text_area("Enter your message", "Type Here..")

if st.button("message"):
    result = message.title()
    st.success(result)

# st.date_input()
import datetime
today = st.date_input("Today is", datetime.datetime.now())

# st.time_input()

the_time = st.time_input("The time is", datetime.time())

# st.json() : displaying json
st.text("Displaying JSON")
st.json({"name": "McCluskey", "education":"PhD", "department": "IT"})

# st.code(): displaying raw code
st.text("Displaying raw code")
st.code("import pandas as pd")

# displaying raw code with comments and others: with st.echo()

with st.echo():
    # This is your comment
    import numpy as np
    def add_function(x,y):
        return np.sqrt(x+y)
        
# st.sidebar(): SIDEBARS
st.sidebar.header("About")
st.sidebar.write("This is my first sidebar explanation")

# Sidebar with slider
a=st.sidebar.slider("input1",0,5,2,1)
x=st.sidebar.slider("input2")
st.write("# sidebar input result")
st.success(a*x)

# Dataframe
df=pd.read_csv("Advertising.csv")

# To display dataframe there are 3 methods

# Method 1
st.table(df.head())
# Method 2
st.write(df.head())  # dynamic, you can sort
st.write(df.isnull().sum())
# Method 3
st.dataframe(df.describe().T)  # dynamic, you can sort

VISUALIZATIONS

- st.bar_chart(df.x) method to draw this histogram.
- st.map()
        st.subheader('Map of all pickups')
        st.map(data)

        hour_to_filter = 17
        filtered_data = data[data[DATE_COLUMN].dt.hour == hour_to_filter]
        st.subheader(f'Map of all pickups at {hour_to_filter}:00')
        st.map(filtered_data)

- import altair as alt

df = pd.DataFrame({'x': range(1, 11), 'y': range(10, 101, 10)})

chart_type = st.radio('Hangi grafik türünü görmek istersiniz?', ['Bar', 'Histogram'])

if chart_type == 'Bar':
    chart = alt.Chart(df).mark_bar().encode(x='x', y='y')
else:
    chart = alt.Chart(df).mark_bar().encode(x=alt.X('y', bin=alt.Bin(step=10)), y='count()')

st.altair_chart(chart, use_container_width=True)


# MODEL DEPLOYMENT

st.header("MODEL DEPLOYMENT")
import pickle
filename = "my_model"
model = pickle.load(open(filename, "rb"))

# To take feature inputs
TV = st.sidebar.number_input("TV:",min_value=5, max_value=300)
radio = st.sidebar.number_input("radio:",min_value=1, max_value=50)
newspaper = st.sidebar.number_input("newspaper:",min_value=0, max_value=120)

# Create a dataframe using feature inputs
my_dict = {"TV":TV,
           "radio":radio,
           "newspaper":newspaper}

df = pd.DataFrame.from_dict([my_dict])
st.table(df)

# Prediction with user inputs
predict = st.button("Predict")
result = model.predict(df)
if predict :
    st.success(round(result[0],2))

